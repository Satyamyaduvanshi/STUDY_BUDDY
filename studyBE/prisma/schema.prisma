// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id            Int            @id @default(autoincrement())
//   name          String
//   email         String         @unique
//   password      String
//   profilePic    String?        // Optional profile picture URL

//   // One user can create multiple rooms
//   roomsCreated  Rooms[]        @relation("RoomCreator")

//   // A user can be in only one room at a time
//   studySession  StudySession? 
// }

// model Rooms {
//   id           Int       @id @default(autoincrement())
//   adminId      Int       // Foreign key to User who created the room
//   roomName     String
//   description  String
//   createdAt    DateTime  @default(now())
//   duration     Int       // Duration in minutes (set by admin)

//   // When a room expires, it will be deleted
//   expiresAt    DateTime  // Store end time = createdAt + duration:

//   // Room admin
//   adminUser    User      @relation("RoomCreator", fields: [adminId], references: [id])

//   // Users who joined the room (One-to-Many instead of Many-to-Many)
//   studySessions StudySession[]
// }

// // A user can only be in one room at a time (One-to-Many)
// model StudySession {
//   id         Int      @id @default(autoincrement())
//   userId     Int      @unique  // Ensures a user can join only one room at a time
//   roomId     Int
//   joinedAt   DateTime @default(now())
//   studyTime  Int      @default(0) // Time studied (tracked in WebSocket events)

//   user       User     @relation(fields: [userId], references: [id])
//   room       Rooms    @relation(fields: [roomId], references: [id])
// }



model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  profilePic    String?        // Optional profile picture URL

  // One user can create multiple rooms
  roomsCreated  Rooms[]        @relation("RoomCreator")

  // A user can be in only one room at a time
  studySession  StudySession?

  // One user can send multiple chat messages
  chatMessages  ChatMessage[]
}

model Rooms {
  id           Int       @id @default(autoincrement())
  adminId      Int
  roomName     String
  description  String
  createdAt    DateTime  @default(now())
  duration     Int
  expiresAt    DateTime

  adminUser    User      @relation("RoomCreator", fields: [adminId], references: [id], onDelete: Cascade)

  studySessions StudySession[]
  chatMessages   ChatMessage[]
}

model StudySession {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  roomId     Int
  joinedAt   DateTime @default(now())
  studyTime  Int      @default(0)

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room       Rooms    @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
}

model ChatMessage {
  id      Int      @id @default(autoincrement())
  roomId  Int
  userId  Int
  message String
  sentAt  DateTime @default(now())

  room    Rooms    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId])
}

